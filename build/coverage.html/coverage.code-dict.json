{"/home/travis/build/npmtest/node-npmtest-tape/test.js":"/* istanbul instrument in package npmtest_tape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tape/lib.npmtest_tape.js":"/* istanbul instrument in package npmtest_tape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tape = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tape = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tape/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tape && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tape */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tape\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tape.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tape.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tape.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tape.__dirname + '/lib.npmtest_tape.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tape/node_modules/tape/index.js":"var defined = require('defined');\nvar createDefaultStream = require('./lib/default_stream');\nvar Test = require('./lib/test');\nvar createResult = require('./lib/results');\nvar through = require('through');\n\nvar canEmitExit = typeof process !== 'undefined' && process\n    && typeof process.on === 'function' && process.browser !== true\n;\nvar canExit = typeof process !== 'undefined' && process\n    && typeof process.exit === 'function'\n;\n\nvar nextTick = typeof setImmediate !== 'undefined'\n    ? setImmediate\n    : process.nextTick\n;\n\nexports = module.exports = (function () {\n    var harness;\n    var lazyLoad = function () {\n        return getHarness().apply(this, arguments);\n    };\n    \n    lazyLoad.only = function () {\n        return getHarness().only.apply(this, arguments);\n    };\n    \n    lazyLoad.createStream = function (opts) {\n        if (!opts) opts = {};\n        if (!harness) {\n            var output = through();\n            getHarness({ stream: output, objectMode: opts.objectMode });\n            return output;\n        }\n        return harness.createStream(opts);\n    };\n    \n    lazyLoad.onFinish = function () {\n        return getHarness().onFinish.apply(this, arguments);\n    };\n\n    lazyLoad.getHarness = getHarness\n\n    return lazyLoad\n\n    function getHarness (opts) {\n        if (!opts) opts = {};\n        opts.autoclose = !canEmitExit;\n        if (!harness) harness = createExitHarness(opts);\n        return harness;\n    }\n})();\n\nfunction createExitHarness (conf) {\n    if (!conf) conf = {};\n    var harness = createHarness({\n        autoclose: defined(conf.autoclose, false)\n    });\n    \n    var stream = harness.createStream({ objectMode: conf.objectMode });\n    var es = stream.pipe(conf.stream || createDefaultStream());\n    if (canEmitExit) {\n        es.on('error', function (err) { harness._exitCode = 1 });\n    }\n    \n    var ended = false;\n    stream.on('end', function () { ended = true });\n    \n    if (conf.exit === false) return harness;\n    if (!canEmitExit || !canExit) return harness;\n\n    var inErrorState = false;\n\n    process.on('exit', function (code) {\n        // let the process exit cleanly.\n        if (code !== 0) {\n            return\n        }\n\n        if (!ended) {\n            var only = harness._results._only;\n            for (var i = 0; i < harness._tests.length; i++) {\n                var t = harness._tests[i];\n                if (only && t !== only) continue;\n                t._exit();\n            }\n        }\n        harness.close();\n        process.exit(code || harness._exitCode);\n    });\n    \n    return harness;\n}\n\nexports.createHarness = createHarness;\nexports.Test = Test;\nexports.test = exports; // tap compat\nexports.test.skip = Test.skip;\n\nvar exitInterval;\n\nfunction createHarness (conf_) {\n    if (!conf_) conf_ = {};\n    var results = createResult();\n    if (conf_.autoclose !== false) {\n        results.once('done', function () { results.close() });\n    }\n    \n    var test = function (name, conf, cb) {\n        var t = new Test(name, conf, cb);\n        test._tests.push(t);\n        \n        (function inspectCode (st) {\n            st.on('test', function sub (st_) {\n                inspectCode(st_);\n            });\n            st.on('result', function (r) {\n                if (!r.ok && typeof r !== 'string') test._exitCode = 1\n            });\n        })(t);\n        \n        results.push(t);\n        return t;\n    };\n    test._results = results;\n    \n    test._tests = [];\n    \n    test.createStream = function (opts) {\n        return results.createStream(opts);\n    };\n\n    test.onFinish = function (cb) {\n        results.on('done', cb);\n    };\n    \n    var only = false;\n    test.only = function () {\n        if (only) throw new Error('there can only be one only test');\n        only = true;\n        var t = test.apply(null, arguments);\n        results.only(t);\n        return t;\n    };\n    test._exitCode = 0;\n    \n    test.close = function () { results.close() };\n    \n    return test;\n}\n","/home/travis/build/npmtest/node-npmtest-tape/node_modules/tape/lib/default_stream.js":"var through = require('through');\nvar fs = require('fs');\n\nmodule.exports = function () {\n    var line = '';\n    var stream = through(write, flush);\n    return stream;\n    \n    function write (buf) {\n        for (var i = 0; i < buf.length; i++) {\n            var c = typeof buf === 'string'\n                ? buf.charAt(i)\n                : String.fromCharCode(buf[i])\n            ;\n            if (c === '\\n') flush();\n            else line += c;\n        }\n    }\n    \n    function flush () {\n        if (fs.writeSync && /^win/.test(process.platform)) {\n            try { fs.writeSync(1, line + '\\n'); }\n            catch (e) { stream.emit('error', e) }\n        }\n        else {\n            try { console.log(line) }\n            catch (e) { stream.emit('error', e) }\n        }\n        line = '';\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-tape/node_modules/tape/lib/test.js":"var deepEqual = require('deep-equal');\nvar defined = require('defined');\nvar path = require('path');\nvar inherits = require('inherits');\nvar EventEmitter = require('events').EventEmitter;\nvar has = require('has');\nvar trim = require('string.prototype.trim');\nvar bind = require('function-bind');\nvar forEach = require('for-each');\nvar isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);\n\nmodule.exports = Test;\n\nvar nextTick = typeof setImmediate !== 'undefined'\n    ? setImmediate\n    : process.nextTick\n;\nvar safeSetTimeout = setTimeout;\n\ninherits(Test, EventEmitter);\n\nvar getTestArgs = function (name_, opts_, cb_) {\n    var name = '(anonymous)';\n    var opts = {};\n    var cb;\n\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        var t = typeof arg;\n        if (t === 'string') {\n            name = arg;\n        }\n        else if (t === 'object') {\n            opts = arg || opts;\n        }\n        else if (t === 'function') {\n            cb = arg;\n        }\n    }\n    return { name: name, opts: opts, cb: cb };\n};\n\nfunction Test (name_, opts_, cb_) {\n    if (! (this instanceof Test)) {\n        return new Test(name_, opts_, cb_);\n    }\n\n    var args = getTestArgs(name_, opts_, cb_);\n\n    this.readable = true;\n    this.name = args.name || '(anonymous)';\n    this.assertCount = 0;\n    this.pendingCount = 0;\n    this._skip = args.opts.skip || false;\n    this._timeout = args.opts.timeout;\n    this._objectPrintDepth = args.opts.objectPrintDepth || 5;\n    this._plan = undefined;\n    this._cb = args.cb;\n    this._progeny = [];\n    this._ok = true;\n\n    for (var prop in this) {\n        this[prop] = (function bind(self, val) {\n            if (typeof val === 'function') {\n                return function bound() {\n                    return val.apply(self, arguments);\n                };\n            }\n            else return val;\n        })(this, this[prop]);\n    }\n}\n\nTest.prototype.run = function () {\n    if (this._skip) {\n        this.comment('SKIP ' + this.name);\n    }\n    if (!this._cb || this._skip) {\n        return this._end();\n    }\n    if (this._timeout != null) {\n        this.timeoutAfter(this._timeout);\n    }\n    this.emit('prerun');\n    this._cb(this);\n    this.emit('run');\n};\n\nTest.prototype.test = function (name, opts, cb) {\n    var self = this;\n    var t = new Test(name, opts, cb);\n    this._progeny.push(t);\n    this.pendingCount++;\n    this.emit('test', t);\n    t.on('prerun', function () {\n        self.assertCount++;\n    })\n    \n    if (!self._pendingAsserts()) {\n        nextTick(function () {\n            self._end();\n        });\n    }\n    \n    nextTick(function() {\n        if (!self._plan && self.pendingCount == self._progeny.length) {\n            self._end();\n        }\n    });\n};\n\nTest.prototype.comment = function (msg) {\n    var that = this;\n    forEach(trim(msg).split('\\n'), function (aMsg) {\n        that.emit('result', trim(aMsg).replace(/^#\\s*/, ''));\n    });\n};\n\nTest.prototype.plan = function (n) {\n    this._plan = n;\n    this.emit('plan', n);\n};\n\nTest.prototype.timeoutAfter = function(ms) {\n    if (!ms) throw new Error('timeoutAfter requires a timespan');\n    var self = this;\n    var timeout = safeSetTimeout(function() {\n        self.fail('test timed out after ' + ms + 'ms');\n        self.end();\n    }, ms);\n    this.once('end', function() {\n        clearTimeout(timeout);\n    });\n}\n\nTest.prototype.end = function (err) { \n    var self = this;\n    if (arguments.length >= 1 && !!err) {\n        this.ifError(err);\n    }\n    \n    if (this.calledEnd) {\n        this.fail('.end() called twice');\n    }\n    this.calledEnd = true;\n    this._end();\n};\n\nTest.prototype._end = function (err) {\n    var self = this;\n    if (this._progeny.length) {\n        var t = this._progeny.shift();\n        t.on('end', function () { self._end() });\n        t.run();\n        return;\n    }\n    \n    if (!this.ended) this.emit('end');\n    var pendingAsserts = this._pendingAsserts();\n    if (!this._planError && this._plan !== undefined && pendingAsserts) {\n        this._planError = true;\n        this.fail('plan != count', {\n            expected : this._plan,\n            actual : this.assertCount\n        });\n    }\n    this.ended = true;\n};\n\nTest.prototype._exit = function () {\n    if (this._plan !== undefined &&\n        !this._planError && this.assertCount !== this._plan) {\n        this._planError = true;\n        this.fail('plan != count', {\n            expected : this._plan,\n            actual : this.assertCount,\n            exiting : true\n        });\n    }\n    else if (!this.ended) {\n        this.fail('test exited without ending', {\n            exiting: true\n        });\n    }\n};\n\nTest.prototype._pendingAsserts = function () {\n    if (this._plan === undefined) {\n        return 1;\n    }\n    else {\n        return this._plan - (this._progeny.length + this.assertCount);\n    }\n};\n\nTest.prototype._assert = function assert (ok, opts) {\n    var self = this;\n    var extra = opts.extra || {};\n    \n    var res = {\n        id : self.assertCount ++,\n        ok : Boolean(ok),\n        skip : defined(extra.skip, opts.skip),\n        name : defined(extra.message, opts.message, '(unnamed assert)'),\n        operator : defined(extra.operator, opts.operator),\n        objectPrintDepth : self._objectPrintDepth\n    };\n    if (has(opts, 'actual') || has(extra, 'actual')) {\n        res.actual = defined(extra.actual, opts.actual);\n    }\n    if (has(opts, 'expected') || has(extra, 'expected')) {\n        res.expected = defined(extra.expected, opts.expected);\n    }\n    this._ok = Boolean(this._ok && ok);\n    \n    if (!ok) {\n        res.error = defined(extra.error, opts.error, new Error(res.name));\n    }\n    \n    if (!ok) {\n        var e = new Error('exception');\n        var err = (e.stack || '').split('\\n');\n        var dir = path.dirname(__dirname) + path.sep;\n        \n        for (var i = 0; i < err.length; i++) {\n            var m = /^[^\\s]*\\s*\\bat\\s+(.+)/.exec(err[i]);\n            if (!m) {\n                continue;\n            }\n            \n            var s = m[1].split(/\\s+/);\n            var filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[1]);\n            if (!filem) {\n                filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[2]);\n                \n                if (!filem) {\n                    filem = /((?:\\/|[A-Z]:\\\\)[^:\\s]+:(\\d+)(?::(\\d+))?)/.exec(s[3]);\n\n                    if (!filem) {\n                        continue;\n                    }\n                }\n            }\n            \n            if (filem[1].slice(0, dir.length) === dir) {\n                continue;\n            }\n            \n            res.functionName = s[0];\n            res.file = filem[1];\n            res.line = Number(filem[2]);\n            if (filem[3]) res.column = filem[3];\n            \n            res.at = m[1];\n            break;\n        }\n    }\n\n    self.emit('result', res);\n    \n    var pendingAsserts = self._pendingAsserts();\n    if (!pendingAsserts) {\n        if (extra.exiting) {\n            self._end();\n        } else {\n            nextTick(function () {\n                self._end();\n            });\n        }\n    }\n    \n    if (!self._planError && pendingAsserts < 0) {\n        self._planError = true;\n        self.fail('plan != count', {\n            expected : self._plan,\n            actual : self._plan - pendingAsserts\n        });\n    }\n};\n\nTest.prototype.fail = function (msg, extra) {\n    this._assert(false, {\n        message : msg,\n        operator : 'fail',\n        extra : extra\n    });\n};\n\nTest.prototype.pass = function (msg, extra) {\n    this._assert(true, {\n        message : msg,\n        operator : 'pass',\n        extra : extra\n    });\n};\n\nTest.prototype.skip = function (msg, extra) {\n    this._assert(true, {\n        message : msg,\n        operator : 'skip',\n        skip : true,\n        extra : extra\n    });\n};\n\nTest.prototype.ok\n= Test.prototype['true']\n= Test.prototype.assert\n= function (value, msg, extra) {\n    this._assert(value, {\n        message : defined(msg, 'should be truthy'),\n        operator : 'ok',\n        expected : true,\n        actual : value,\n        extra : extra\n    });\n};\n\nTest.prototype.notOk\n= Test.prototype['false']\n= Test.prototype.notok\n= function (value, msg, extra) {\n    this._assert(!value, {\n        message : defined(msg, 'should be falsy'),\n        operator : 'notOk',\n        expected : false,\n        actual : value,\n        extra : extra\n    });\n};\n\nTest.prototype.error\n= Test.prototype.ifError\n= Test.prototype.ifErr\n= Test.prototype.iferror\n= function (err, msg, extra) {\n    this._assert(!err, {\n        message : defined(msg, String(err)),\n        operator : 'error',\n        actual : err,\n        extra : extra\n    });\n};\n\nTest.prototype.equal\n= Test.prototype.equals\n= Test.prototype.isEqual\n= Test.prototype.is\n= Test.prototype.strictEqual\n= Test.prototype.strictEquals\n= function (a, b, msg, extra) {\n    this._assert(a === b, {\n        message : defined(msg, 'should be equal'),\n        operator : 'equal',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notEqual\n= Test.prototype.notEquals\n= Test.prototype.notStrictEqual\n= Test.prototype.notStrictEquals\n= Test.prototype.isNotEqual\n= Test.prototype.isNot\n= Test.prototype.not\n= Test.prototype.doesNotEqual\n= Test.prototype.isInequal\n= function (a, b, msg, extra) {\n    this._assert(a !== b, {\n        message : defined(msg, 'should not be equal'),\n        operator : 'notEqual',\n        actual : a,\n        notExpected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.deepEqual\n= Test.prototype.deepEquals\n= Test.prototype.isEquivalent\n= Test.prototype.same\n= function (a, b, msg, extra) {\n    this._assert(deepEqual(a, b, { strict: true }), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'deepEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.deepLooseEqual\n= Test.prototype.looseEqual\n= Test.prototype.looseEquals\n= function (a, b, msg, extra) {\n    this._assert(deepEqual(a, b), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'deepLooseEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notDeepEqual\n= Test.prototype.notEquivalent\n= Test.prototype.notDeeply\n= Test.prototype.notSame\n= Test.prototype.isNotDeepEqual\n= Test.prototype.isNotDeeply\n= Test.prototype.isNotEquivalent\n= Test.prototype.isInequivalent\n= function (a, b, msg, extra) {\n    this._assert(!deepEqual(a, b, { strict: true }), {\n        message : defined(msg, 'should not be equivalent'),\n        operator : 'notDeepEqual',\n        actual : a,\n        notExpected : b,\n        extra : extra\n    });\n};\n\nTest.prototype.notDeepLooseEqual\n= Test.prototype.notLooseEqual\n= Test.prototype.notLooseEquals\n= function (a, b, msg, extra) {\n    this._assert(!deepEqual(a, b), {\n        message : defined(msg, 'should be equivalent'),\n        operator : 'notDeepLooseEqual',\n        actual : a,\n        expected : b,\n        extra : extra\n    });\n};\n\nTest.prototype['throws'] = function (fn, expected, msg, extra) {\n    if (typeof expected === 'string') {\n        msg = expected;\n        expected = undefined;\n    }\n\n    var caught = undefined;\n\n    try {\n        fn();\n    } catch (err) {\n        caught = { error : err };\n        if ((err != null) && (!isEnumerable(err, 'message') || !has(err, 'message'))) {\n            var message = err.message;\n            delete err.message;\n            err.message = message;\n        }\n    }\n\n    var passed = caught;\n\n    if (expected instanceof RegExp) {\n        passed = expected.test(caught && caught.error);\n        expected = String(expected);\n    }\n\n    if (typeof expected === 'function' && caught) {\n        passed = caught.error instanceof expected;\n        caught.error = caught.error.constructor;\n    }\n\n    this._assert(typeof fn === 'function' && passed, {\n        message : defined(msg, 'should throw'),\n        operator : 'throws',\n        actual : caught && caught.error,\n        expected : expected,\n        error: !passed && caught && caught.error,\n        extra : extra\n    });\n};\n\nTest.prototype.doesNotThrow = function (fn, expected, msg, extra) {\n    if (typeof expected === 'string') {\n        msg = expected;\n        expected = undefined;\n    }\n    var caught = undefined;\n    try {\n        fn();\n    }\n    catch (err) {\n        caught = { error : err };\n    }\n    this._assert(!caught, {\n        message : defined(msg, 'should not throw'),\n        operator : 'throws',\n        actual : caught && caught.error,\n        expected : expected,\n        error : caught && caught.error,\n        extra : extra\n    });\n};\n\nTest.skip = function (name_, _opts, _cb) {\n    var args = getTestArgs.apply(null, arguments);\n    args.opts.skip = true;\n    return Test(args.name, args.opts, args.cb);\n};\n\n// vim: set softtabstop=4 shiftwidth=4:\n\n","/home/travis/build/npmtest/node-npmtest-tape/node_modules/tape/lib/results.js":"var EventEmitter = require('events').EventEmitter;\nvar inherits = require('inherits');\nvar through = require('through');\nvar resumer = require('resumer');\nvar inspect = require('object-inspect');\nvar bind = require('function-bind');\nvar has = require('has');\nvar regexpTest = bind.call(Function.call, RegExp.prototype.test);\nvar yamlIndicators = /\\:|\\-|\\?/;\nvar nextTick = typeof setImmediate !== 'undefined'\n    ? setImmediate\n    : process.nextTick\n;\n\nmodule.exports = Results;\ninherits(Results, EventEmitter);\n\nfunction Results () {\n    if (!(this instanceof Results)) return new Results;\n    this.count = 0;\n    this.fail = 0;\n    this.pass = 0;\n    this._stream = through();\n    this.tests = [];\n    this._only = null;\n}\n\nResults.prototype.createStream = function (opts) {\n    if (!opts) opts = {};\n    var self = this;\n    var output, testId = 0;\n    if (opts.objectMode) {\n        output = through();\n        self.on('_push', function ontest (t, extra) {\n            if (!extra) extra = {};\n            var id = testId++;\n            t.once('prerun', function () {\n                var row = {\n                    type: 'test',\n                    name: t.name,\n                    id: id\n                };\n                if (has(extra, 'parent')) {\n                    row.parent = extra.parent;\n                }\n                output.queue(row);\n            });\n            t.on('test', function (st) {\n                ontest(st, { parent: id });\n            });\n            t.on('result', function (res) {\n                res.test = id;\n                res.type = 'assert';\n                output.queue(res);\n            });\n            t.on('end', function () {\n                output.queue({ type: 'end', test: id });\n            });\n        });\n        self.on('done', function () { output.queue(null) });\n    }\n    else {\n        output = resumer();\n        output.queue('TAP version 13\\n');\n        self._stream.pipe(output);\n    }\n    \n    nextTick(function next() {\n        var t;\n        while (t = getNextTest(self)) {\n            t.run();\n            if (!t.ended) return t.once('end', function(){ nextTick(next); });\n        }\n        self.emit('done');\n    });\n    \n    return output;\n};\n\nResults.prototype.push = function (t) {\n    var self = this;\n    self.tests.push(t);\n    self._watch(t);\n    self.emit('_push', t);\n};\n\nResults.prototype.only = function (t) {\n    this._only = t;\n};\n\nResults.prototype._watch = function (t) {\n    var self = this;\n    var write = function (s) { self._stream.queue(s) };\n    t.once('prerun', function () {\n        write('# ' + t.name + '\\n');\n    });\n    \n    t.on('result', function (res) {\n        if (typeof res === 'string') {\n            write('# ' + res + '\\n');\n            return;\n        }\n        write(encodeResult(res, self.count + 1));\n        self.count ++;\n\n        if (res.ok) self.pass ++\n        else self.fail ++\n    });\n    \n    t.on('test', function (st) { self._watch(st) });\n};\n\nResults.prototype.close = function () {\n    var self = this;\n    if (self.closed) self._stream.emit('error', new Error('ALREADY CLOSED'));\n    self.closed = true;\n    var write = function (s) { self._stream.queue(s) };\n    \n    write('\\n1..' + self.count + '\\n');\n    write('# tests ' + self.count + '\\n');\n    write('# pass  ' + self.pass + '\\n');\n    if (self.fail) write('# fail  ' + self.fail + '\\n')\n    else write('\\n# ok\\n')\n\n    self._stream.queue(null);\n};\n\nfunction encodeResult (res, count) {\n    var output = '';\n    output += (res.ok ? 'ok ' : 'not ok ') + count;\n    output += res.name ? ' ' + res.name.toString().replace(/\\s+/g, ' ') : '';\n    \n    if (res.skip) output += ' # SKIP';\n    else if (res.todo) output += ' # TODO';\n    \n    output += '\\n';\n    if (res.ok) return output;\n    \n    var outer = '  ';\n    var inner = outer + '  ';\n    output += outer + '---\\n';\n    output += inner + 'operator: ' + res.operator + '\\n';\n    \n    if (has(res, 'expected') || has(res, 'actual')) {\n        var ex = inspect(res.expected, {depth: res.objectPrintDepth});\n        var ac = inspect(res.actual, {depth: res.objectPrintDepth});\n        \n        if (Math.max(ex.length, ac.length) > 65 || invalidYaml(ex) || invalidYaml(ac)) {\n            output += inner + 'expected: |-\\n' + inner + '  ' + ex + '\\n';\n            output += inner + 'actual: |-\\n' + inner + '  ' + ac + '\\n';\n        }\n        else {\n            output += inner + 'expected: ' + ex + '\\n';\n            output += inner + 'actual:   ' + ac + '\\n';\n        }\n    }\n    if (res.at) {\n        output += inner + 'at: ' + res.at + '\\n';\n    }\n    if (res.operator === 'error' && res.actual && res.actual.stack) {\n        var lines = String(res.actual.stack).split('\\n');\n        output += inner + 'stack: |-\\n';\n        for (var i = 0; i < lines.length; i++) {\n            output += inner + '  ' + lines[i] + '\\n';\n        }\n    }\n    \n    output += outer + '...\\n';\n    return output;\n}\n\nfunction getNextTest (results) {\n    if (!results._only) {\n        return results.tests.shift();\n    }\n    \n    do {\n        var t = results.tests.shift();\n        if (!t) continue;\n        if (results._only === t) {\n            return t;\n        }\n    } while (results.tests.length !== 0)\n}\n\nfunction invalidYaml (str) {\n    return regexpTest(yamlIndicators, str);\n}\n"}